set(INCROOT ${PROJECT_SOURCE_DIR}/include/lug/Graphics)
set(SRCROOT ${PROJECT_SOURCE_DIR}/src/lug/Graphics)

# all source files
set(SRC
    ${SRCROOT}/Graphics.cpp

    ${SRCROOT}/Builder/Camera.cpp
    ${SRCROOT}/Builder/Light.cpp
    ${SRCROOT}/Builder/Material.cpp
    ${SRCROOT}/Builder/Mesh.cpp

    ${SRCROOT}/Module.cpp
    ${SRCROOT}/Node.cpp
    ${SRCROOT}/GltfLoader.cpp
    ${SRCROOT}/Resource.cpp
    ${SRCROOT}/ResourceManager.cpp

    ${SRCROOT}/Render/Camera/Camera.cpp
    ${SRCROOT}/Render/Camera/Orthographic.cpp
    ${SRCROOT}/Render/Camera/Perspective.cpp

    ${SRCROOT}/Render/Light.cpp
    ${SRCROOT}/Render/Material.cpp
    ${SRCROOT}/Render/Mesh.cpp
    ${SRCROOT}/Render/Queue.cpp
    ${SRCROOT}/Render/View.cpp

    ${SRCROOT}/Renderer.cpp

    ${SRCROOT}/Scene/Node.cpp
    ${SRCROOT}/Scene/Scene.cpp

    ${SRCROOT}/Vulkan/API/Builder/Buffer.cpp
    ${SRCROOT}/Vulkan/API/Builder/CommandBuffer.cpp
    ${SRCROOT}/Vulkan/API/Builder/CommandPool.cpp
    ${SRCROOT}/Vulkan/API/Builder/DescriptorPool.cpp
    ${SRCROOT}/Vulkan/API/Builder/DescriptorSet.cpp
    ${SRCROOT}/Vulkan/API/Builder/DescriptorSetLayout.cpp
    ${SRCROOT}/Vulkan/API/Builder/Device.cpp
    ${SRCROOT}/Vulkan/API/Builder/DeviceMemory.cpp
    ${SRCROOT}/Vulkan/API/Builder/Fence.cpp
    ${SRCROOT}/Vulkan/API/Builder/Framebuffer.cpp
    ${SRCROOT}/Vulkan/API/Builder/GraphicsPipeline.cpp
    ${SRCROOT}/Vulkan/API/Builder/Image.cpp
    ${SRCROOT}/Vulkan/API/Builder/ImageView.cpp
    ${SRCROOT}/Vulkan/API/Builder/Instance.cpp
    ${SRCROOT}/Vulkan/API/Builder/PipelineLayout.cpp
    ${SRCROOT}/Vulkan/API/Builder/RenderPass.cpp
    ${SRCROOT}/Vulkan/API/Builder/Sampler.cpp
    ${SRCROOT}/Vulkan/API/Builder/Semaphore.cpp
    ${SRCROOT}/Vulkan/API/Builder/ShaderModule.cpp
    ${SRCROOT}/Vulkan/API/Builder/Surface.cpp
    ${SRCROOT}/Vulkan/API/Builder/Swapchain.cpp

    ${SRCROOT}/Vulkan/API/Buffer.cpp
    ${SRCROOT}/Vulkan/API/CommandBuffer/Buffer.cpp
    ${SRCROOT}/Vulkan/API/CommandBuffer/DescriptorSet.cpp
    ${SRCROOT}/Vulkan/API/CommandBuffer/Pipeline.cpp
    ${SRCROOT}/Vulkan/API/CommandBuffer/RenderPass.cpp
    ${SRCROOT}/Vulkan/API/CommandBuffer.cpp
    ${SRCROOT}/Vulkan/API/CommandPool.cpp
    ${SRCROOT}/Vulkan/API/DescriptorPool.cpp
    ${SRCROOT}/Vulkan/API/DescriptorSet.cpp
    ${SRCROOT}/Vulkan/API/DescriptorSetLayout.cpp
    ${SRCROOT}/Vulkan/API/Device.cpp
    ${SRCROOT}/Vulkan/API/DeviceMemory.cpp
    ${SRCROOT}/Vulkan/API/Fence.cpp
    ${SRCROOT}/Vulkan/API/Framebuffer.cpp
    ${SRCROOT}/Vulkan/API/GraphicsPipeline.cpp
    ${SRCROOT}/Vulkan/API/Image.cpp
    ${SRCROOT}/Vulkan/API/ImageView.cpp
    ${SRCROOT}/Vulkan/API/Instance.cpp
    ${SRCROOT}/Vulkan/API/Loader.cpp
    ${SRCROOT}/Vulkan/API/PipelineLayout.cpp
    ${SRCROOT}/Vulkan/API/Queue.cpp
    ${SRCROOT}/Vulkan/API/QueueFamily.cpp
    ${SRCROOT}/Vulkan/API/RTTI/Enum.cpp
    ${SRCROOT}/Vulkan/API/RenderPass.cpp
    ${SRCROOT}/Vulkan/API/Sampler.cpp
    ${SRCROOT}/Vulkan/API/Semaphore.cpp
    ${SRCROOT}/Vulkan/API/ShaderModule.cpp
    ${SRCROOT}/Vulkan/API/Surface.cpp
    ${SRCROOT}/Vulkan/API/Swapchain.cpp

    ${SRCROOT}/Vulkan/Builder/Material.cpp
    ${SRCROOT}/Vulkan/Builder/Mesh.cpp

    ${SRCROOT}/Vulkan/Render/BufferPool.cpp
    ${SRCROOT}/Vulkan/Render/Material.cpp
    ${SRCROOT}/Vulkan/Render/Mesh.cpp
    ${SRCROOT}/Vulkan/Render/Pipeline.cpp
    ${SRCROOT}/Vulkan/Render/Pipeline/ShaderBuilder.cpp
    ${SRCROOT}/Vulkan/Render/Technique/Forward.cpp
    ${SRCROOT}/Vulkan/Render/Technique/Technique.cpp
    ${SRCROOT}/Vulkan/Render/View.cpp
    ${SRCROOT}/Vulkan/Render/Window.cpp

    ${SRCROOT}/Vulkan/Renderer.cpp

    ${SRCROOT}/Vulkan/Requirements/Core.hpp
    ${SRCROOT}/Vulkan/Requirements/Requirements.hpp

    ${SRCROOT}/Vulkan/Vulkan.cpp
)
source_group("src" FILES ${SRC})

# all header files
set(INC
    ${INCROOT}/Export.hpp
    ${INCROOT}/Graphics.hpp
    ${INCROOT}/Graphics.inl
    ${INCROOT}/Loader.hpp
    ${INCROOT}/GltfLoader.hpp
    ${INCROOT}/Resource.hpp
    ${INCROOT}/Resource.inl
    ${INCROOT}/ResourceManager.hpp
    ${INCROOT}/ResourceManager.inl

    ${INCROOT}/Builder/Camera.hpp
    ${INCROOT}/Builder/Camera.inl
    ${INCROOT}/Builder/Light.hpp
    ${INCROOT}/Builder/Light.inl
    ${INCROOT}/Builder/Material.hpp
    ${INCROOT}/Builder/Material.inl
    ${INCROOT}/Builder/Mesh.hpp
    ${INCROOT}/Builder/Mesh.inl

    ${INCROOT}/Module.hpp
    ${INCROOT}/Module.inl
    ${INCROOT}/Node.hpp
    ${INCROOT}/Node.inl

    ${INCROOT}/Render/Camera/Camera.hpp
    ${INCROOT}/Render/Camera/Camera.inl
    ${INCROOT}/Render/Camera/Orthographic.hpp
    ${INCROOT}/Render/Camera/Orthographic.inl
    ${INCROOT}/Render/Camera/Perspective.hpp
    ${INCROOT}/Render/Camera/Perspective.inl

    ${INCROOT}/Render/Light.hpp
    ${INCROOT}/Render/Light.inl
    ${INCROOT}/Render/Material.hpp
    ${INCROOT}/Render/Material.inl
    ${INCROOT}/Render/Mesh.hpp
    ${INCROOT}/Render/Mesh.inl
    ${INCROOT}/Render/Queue.hpp
    ${INCROOT}/Render/Queue.inl
    ${INCROOT}/Render/Target.hpp
    ${INCROOT}/Render/Target.inl
    ${INCROOT}/Render/Technique/Type.hpp
    ${INCROOT}/Render/View.hpp
    ${INCROOT}/Render/View.inl
    ${INCROOT}/Render/Window.hpp

    ${INCROOT}/Renderer.hpp
    ${INCROOT}/Renderer.inl

    ${INCROOT}/Scene/Node.hpp
    ${INCROOT}/Scene/Node.inl
    ${INCROOT}/Scene/Scene.hpp
    ${INCROOT}/Scene/Scene.inl

    ${INCROOT}/Vulkan/API/Builder/Buffer.hpp
    ${INCROOT}/Vulkan/API/Builder/Buffer.inl
    ${INCROOT}/Vulkan/API/Builder/CommandBuffer.hpp
    ${INCROOT}/Vulkan/API/Builder/CommandBuffer.inl
    ${INCROOT}/Vulkan/API/Builder/CommandPool.hpp
    ${INCROOT}/Vulkan/API/Builder/CommandPool.inl
    ${INCROOT}/Vulkan/API/Builder/DescriptorPool.hpp
    ${INCROOT}/Vulkan/API/Builder/DescriptorPool.inl
    ${INCROOT}/Vulkan/API/Builder/DescriptorSet.hpp
    ${INCROOT}/Vulkan/API/Builder/DescriptorSet.inl
    ${INCROOT}/Vulkan/API/Builder/DescriptorSetLayout.hpp
    ${INCROOT}/Vulkan/API/Builder/DescriptorSetLayout.inl
    ${INCROOT}/Vulkan/API/Builder/Device.hpp
    ${INCROOT}/Vulkan/API/Builder/Device.inl
    ${INCROOT}/Vulkan/API/Builder/DeviceMemory.hpp
    ${INCROOT}/Vulkan/API/Builder/DeviceMemory.inl
    ${INCROOT}/Vulkan/API/Builder/Fence.hpp
    ${INCROOT}/Vulkan/API/Builder/Fence.inl
    ${INCROOT}/Vulkan/API/Builder/Framebuffer.hpp
    ${INCROOT}/Vulkan/API/Builder/Framebuffer.inl
    ${INCROOT}/Vulkan/API/Builder/GraphicsPipeline.hpp
    ${INCROOT}/Vulkan/API/Builder/GraphicsPipeline.inl
    ${INCROOT}/Vulkan/API/Builder/Image.hpp
    ${INCROOT}/Vulkan/API/Builder/Image.inl
    ${INCROOT}/Vulkan/API/Builder/ImageView.hpp
    ${INCROOT}/Vulkan/API/Builder/ImageView.inl
    ${INCROOT}/Vulkan/API/Builder/Instance.hpp
    ${INCROOT}/Vulkan/API/Builder/Instance.inl
    ${INCROOT}/Vulkan/API/Builder/PipelineLayout.hpp
    ${INCROOT}/Vulkan/API/Builder/PipelineLayout.inl
    ${INCROOT}/Vulkan/API/Builder/RenderPass.hpp
    ${INCROOT}/Vulkan/API/Builder/Sampler.hpp
    ${INCROOT}/Vulkan/API/Builder/Sampler.inl
    ${INCROOT}/Vulkan/API/Builder/Semaphore.hpp
    ${INCROOT}/Vulkan/API/Builder/ShaderModule.hpp
    ${INCROOT}/Vulkan/API/Builder/Surface.hpp
    ${INCROOT}/Vulkan/API/Builder/Surface.inl
    ${INCROOT}/Vulkan/API/Builder/Swapchain.hpp
    ${INCROOT}/Vulkan/API/Builder/Swapchain.inl

    ${INCROOT}/Vulkan/API/Buffer.hpp
    ${INCROOT}/Vulkan/API/Buffer.inl
    ${INCROOT}/Vulkan/API/CommandBuffer/Buffer.inl
    ${INCROOT}/Vulkan/API/CommandBuffer/DescriptorSet.inl
    ${INCROOT}/Vulkan/API/CommandBuffer/Pipeline.inl
    ${INCROOT}/Vulkan/API/CommandBuffer/RenderPass.inl
    ${INCROOT}/Vulkan/API/CommandBuffer.hpp
    ${INCROOT}/Vulkan/API/CommandPool.hpp
    ${INCROOT}/Vulkan/API/CommandPool.inl
    ${INCROOT}/Vulkan/API/DescriptorPool.hpp
    ${INCROOT}/Vulkan/API/DescriptorSet.hpp
    ${INCROOT}/Vulkan/API/DescriptorSetLayout.hpp
    ${INCROOT}/Vulkan/API/DescriptorSetLayout.inl
    ${INCROOT}/Vulkan/API/Device.hpp
    ${INCROOT}/Vulkan/API/Device.inl
    ${INCROOT}/Vulkan/API/DeviceMemory.hpp
    ${INCROOT}/Vulkan/API/DeviceMemory.inl
    ${INCROOT}/Vulkan/API/Fence.hpp
    ${INCROOT}/Vulkan/API/Fence.inl
    ${INCROOT}/Vulkan/API/Framebuffer.hpp
    ${INCROOT}/Vulkan/API/GraphicsPipeline.hpp
    ${INCROOT}/Vulkan/API/Image.hpp
    ${INCROOT}/Vulkan/API/ImageView.hpp
    ${INCROOT}/Vulkan/API/ImageView.inl
    ${INCROOT}/Vulkan/API/Instance.hpp
    ${INCROOT}/Vulkan/API/Instance.inl
    ${INCROOT}/Vulkan/API/Loader.hpp
    ${INCROOT}/Vulkan/API/PipelineLayout.hpp
    ${INCROOT}/Vulkan/API/PipelineLayout.inl
    ${INCROOT}/Vulkan/API/Queue.hpp
    ${INCROOT}/Vulkan/API/QueueFamily.hpp
    ${INCROOT}/Vulkan/API/QueueFamily.inl
    ${INCROOT}/Vulkan/API/RTTI/Enum.hpp
    ${INCROOT}/Vulkan/API/RenderPass.hpp
    ${INCROOT}/Vulkan/API/Sampler.hpp
    ${INCROOT}/Vulkan/API/Semaphore.hpp
    ${INCROOT}/Vulkan/API/ShaderModule.hpp
    ${INCROOT}/Vulkan/API/Surface.hpp
    ${INCROOT}/Vulkan/API/Swapchain.hpp
    ${INCROOT}/Vulkan/API/Swapchain.inl

    ${INCROOT}/Vulkan/Builder/Material.hpp
    ${INCROOT}/Vulkan/Builder/Mesh.hpp

    ${INCROOT}/Vulkan/Render/BufferPool.hpp
    ${INCROOT}/Vulkan/Render/Material.hpp
    ${INCROOT}/Vulkan/Render/Mesh.hpp
    ${INCROOT}/Vulkan/Render/Mesh.inl
    ${INCROOT}/Vulkan/Render/Pipeline.hpp
    ${INCROOT}/Vulkan/Render/Pipeline.inl
    ${INCROOT}/Vulkan/Render/Technique/Forward.hpp
    ${INCROOT}/Vulkan/Render/Technique/Technique.hpp
    ${INCROOT}/Vulkan/Render/View.hpp
    ${INCROOT}/Vulkan/Render/View.inl
    ${INCROOT}/Vulkan/Render/Window.hpp
    ${INCROOT}/Vulkan/Render/Window.inl

    ${INCROOT}/Vulkan/Renderer.hpp
    ${INCROOT}/Vulkan/Renderer.inl
    ${INCROOT}/Vulkan/Vulkan.hpp
)
source_group("inc" FILES ${INC})

if(LUG_OS_ANDROID)
    list(APPEND EXT_LIBRARIES android)
endif()

# Find glTF2-loader
find_package(GLTF2-Loader)

if (NOT GLTF2-LOADER_FOUND)
    if (NOT EXISTS "${LUG_THIRDPARTY_DIR}/glTF2-loader")
        message(FATAL_ERROR "Can't find glTF2-loader in the thirdparty directory")
    endif()

    set(GLTF2-LOADER_ROOT "${LUG_THIRDPARTY_DIR}/glTF2-loader")

    find_package(GLTF2-Loader REQUIRED)

    message(STATUS "Found glTF2-loader library: ${GLTF2-LOADER_LIBRARY}")
    message(STATUS "Found glTF2-loader includes: ${GLTF2-LOADER_INCLUDE_DIR}")
endif()

include_directories(${GLTF2-LOADER_INCLUDE_DIR})

# define the target
lug_add_library(lug-graphics
                SOURCES ${SRC} ${INC}
                DEPENDS lug-window lug-system lug-math
                EXTERNAL_LIBS ${EXT_LIBRARIES} ${GLTF2-LOADER_LIBRARY} ${SHADERC_LIBRARY}
)
